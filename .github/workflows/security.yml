name: Security Scanning

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
  schedule:
    - cron: '26 22 * * 2'

jobs:
  security_scanning:
    permissions:
      contents: read
      security-events: write
      actions: read

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Bandit Scan
        uses: shundor/python-bandit-scan@9cc5aa4a006482b8a7f91134412df6772dbda22c
        with:
          exit_zero: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          skips: 'B101'

      #installing Safety
      - name: Install safety
        run: |
          python -m pip install --upgrade pip
          python -m pip install safety

      #creating output directory
      - name: Create output directory
        run: |
          mkdir -p ./scan-results
          chmod -R 755 ./scan-results  # Set permissions to be writable

      #run safety scan and save to json
      - name: Run safety scan
        run: |
          echo "Starting Safety scan..."
          safety scan --debug --json --stage production --output json > ./scan-results/safety_output.json 2>&1 || true
          echo "Safety scan complete."
          cat ./scan-results/safety_output.json
        env:
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
          SAFETY_STAGE: production


      #check if issues exist in the json
      - name: Check if vulnerabilities exist in the Safety JSON
        id: check_vulns
        run: |
          if jq '.scan_results.projects[].files[].results.dependencies[]? | select(.vulnerabilities.known_vulnerabilities | length > 0)' ./scan-results/safety_output.json; then
            echo "Vulnerabilities found."
            echo "Vulnerabilities_found=true" >> $GITHUB_ENV
          else
            echo "No vulnerabilities found."
            echo "Vulnerabilities_found=false" >> $GITHUB_ENV
          fi
        continue-on-error: true

      #list scan results directory to check output
      - name: List scan-results directory
        run: |
          echo "Listing contents of ./scan-results:"
          ls -l ./scan-results || echo "No files found in ./scan-results"

      #convert results to SARIF
      - name: Convert safety results to SARIF
        if: ${{ env.Vulnerabilities_found == 'true' }}
        run: |
          echo "Converting safety_output.json to SARIF"
          python scripts/convert_safety_to_sarif.py ./scan-results/safety_output.json ./scan-results/safety_output.sarif requirements.txt || echo "SARIF conversion failed"
          echo "Conversion complete."

      #check if SARIF file was created
      - name: Check if SARIF file was created
        run: |
          echo "Checking for SARIF file..."
          if [ -f ./scan-results/safety_output.sarif ]; then
            echo "SARIF file found."
            cat ./scan-results/safety_output.sarif
          else
            echo "SARIF file not found."
          fi

      #make sure its really there before we upload it
      - name: Check if SARIF file exists
        id: check_sarif_file
        run: |
          if [ -f ./scan-results/safety_output.sarif ]; then
            echo "SARIF file exists, proceeding with upload."
            echo "sarif_file_exists=true" >> $GITHUB_ENV
          else
            echo "SARIF file does not exist."
            echo "sarif_file_exists=false" >> $GITHUB_ENV
          fi
        continue-on-error: true

      #upload results to code scanning
      - name: Upload safety results to code scanning alerts
        if: ${{ env.sarif_file_exists == 'true' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./scan-results/safety_output.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
          wait-for-processing: true

      #just printing a message if no vulns are found
      - name: No vulnerabilities found, skipping conversion
        if: ${{ env.Vulnerabilities_found == 'false' }}
        run: echo "No vulnerabilities were found, skipping SARIF conversion."