name: Security Scanning

on:
  push:
    branches: [ "main", "secure_coding_updates" ]
  pull_request:
    branches: [ "main", "secure_coding_updates" ]
  schedule:
    - cron: '26 22 * * 2'

jobs:
  security_scanning:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Bandit Scan
        uses: shundor/python-bandit-scan@9cc5aa4a006482b8a7f91134412df6772dbda22c
        with:
          exit_zero: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Install Safety
      - name: Install Safety
        run: |
          python -m pip install --upgrade pip
          python -m pip install safety

      # Create output directory
      - name: Create output directory
        run: |
          mkdir -p ./scan-results
          chmod -R 755 ./scan-results  # Set permissions to be writable

      # Run Safety Scan
      #- uses: pyupio/safety-action@v1
      #  name: Safety Scan
      #  id: safety_scan
      #  with:
      #    #api-key: 2ecceb26-6325-44b8-9597-8c2b18493a6d
      #    api-key: ${{ secrets.SAFETY_API_KEY }}

      # Run Safety Scan and Save output to json file
      - name: Run Safety Scan
        run: |
          safety scan --debug --json --stage production --output json  > ./scan-results/safety_output.json || echo "Safety scan failed"
        env:
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
          SAFETY_STAGE: production

      # Convert Safety results to SARIF
      - name: Convert Safety results to SARIF
        run: |
          echo "Converting safety_output.json to SARIF"
          python scripts/convert_safety_to_sarif.py ./scan-results/safety_output.json ./scan-results/safety_output.sarif
          echo "Conversion complete."

      # Check if SARIF file exists and set an output variable
      - name: Check if SARIF file exists
        id: check_sarif
        run: |
          if [ -f ./scan-results/safety_output.sarif ]; then
            echo "SARIF file exists."
            echo "file_exists=true" >> $GITHUB_ENV
          else
            echo "SARIF file does not exist."
            echo "file_exists=false" >> $GITHUB_ENV
          fi

      # Upload Safety results to Code Scanning Alerts if SARIF file exists
      - name: Upload Safety results to Code Scanning Alerts
        if: env.file_exists == 'true'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./scan-results/safety_output.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
          wait-for-processing: true

      # If no issues were found, print a message (optional)
      - name: No issues found, skipping conversion
        if: env.file_exists == 'false'
        run: echo "No issues were found, skipping SARIF conversion."