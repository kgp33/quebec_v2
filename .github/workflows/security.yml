# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Bandit is a security linter designed to find common security issues in Python code.
# This action will run Bandit on your codebase.
# The results of the scan will be found under the Security tab of your repository.

# https://github.com/marketplace/actions/bandit-scan is ISC licensed, by abirismyname
# https://pypi.org/project/bandit/ is Apache v2.0 licensed, by PyCQA

name: Security Scanning
on:
  push:
    branches: [ "main", "secure_coding_updates" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main", "secure_coding_updates" ]
  schedule:
    - cron: '26 22 * * 2'

jobs:
  security_scanning:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Bandit Scan
        uses: shundor/python-bandit-scan@9cc5aa4a006482b8a7f91134412df6772dbda22c
        with: # optional arguments
          # exit with 0, even with results found
          exit_zero: true # optional, default is DEFAULT
          # Github token of the repository (automatically created by Github)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information.
          # File or directory to run bandit on
          # path: # optional, default is .
          # Report only issues of a given severity level or higher. Can be LOW, MEDIUM or HIGH. Default is UNDEFINED (everything)
          # level: # optional, default is UNDEFINED
          # Report only issues of a given confidence level or higher. Can be LOW, MEDIUM or HIGH. Default is UNDEFINED (everything)
          # confidence: # optional, default is UNDEFINED
          # comma-separated list of paths (glob patterns supported) to exclude from scan (note that these are in addition to the excluded paths provided in the config file) (default: .svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.eggs,*.egg)
          # excluded_paths: # optional, default is DEFAULT
          # comma-separated list of test IDs to skip
          # skips: # optional, default is DEFAULT
          # path to a .bandit file that supplies command line arguments
          # ini_path: # optional, default is DEFAULT

      #install safety
      - name: Install Safety
        run: |
          python -m pip install --upgrade pip
          python -m pip install safety

      #creating output directory to store safety scans
      - name: Create output directory
        run: |
          mkdir -p ./scan-results
          #make it writable
          chmod -R 755 ./scan-results  # Set permissions to be writable

      #run SafetyCLI Scan
      - uses: pyupio/safety-action@v1
        name: Safety Scan
        id: safety_scan
        with:
          #harcoding for testing purposes until Karim and I can figure out secrets
          api-key: 2ecceb26-6325-44b8-9597-8c2b18493a6d
          #api-key: ${{ secrets.SAFETY_API_KEY }}

      #save safety output to file
      run: |
          safety check --json > ./scan-results/safety_output.json

      #convert safety results to SARIF and upload 
      - name: Convert and Upload Safety results to SARIF
        run: |
          echo "Converting safety_output.json to SARIF"
          python scripts/convert_safety_to_sarif.py ./scan-results/safety_output.json ./scan-results/safety_output.sarif
          echo "Conversion complete."

      - name: Upload Safety results to Code Scanning Alerts
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./scan-results/safety_output.sarif

