@startuml modules_diagram

' Allow mixing of classes and other UML elements (like files)
allowmixing

' Define files
file "stock.json" << (S, #FFAAAA) >>
file "sample_portfolio.json" << (S, #FFAAAA) >>

' Define PriceApp package and its classes
package PriceApp {
    class "price_py"  <<module>> << (M,orchid) >> {
        ---
        + fetch_portfolio_sharpe_ratio()
        + load_and_validate_portfolio()
        + calculate_total_portfolio_value()
        + calculate_value_sharpe()
    }
}

' Define UnitTests package and its classes
package UnitTests {
    class "test_price_py" <<module>> << (M,orchid) >> {
        ---
        + price_data()
        + test_calculate_total_portfolio_value()
        + test_fetch_portfolio_sharpe_ratio()
    }

    class "test_fuzz_py" <<module>> << (M,orchid) >> {
        ---
        + stock_portfolio_strategy()
        + generate_realistic_returns()
        + portfolio_with_historical_data()
        + test_fuzz_portfolio_value()
        + test_fuzz_sharpe_ratio()
        + test_basic_portfolio_calculations()
        + test_edge_cases()
    }

    class "test_schema_hypothesis_py" <<module>> << (M,orchid) >> {
        ---
        + validate_portfolio()
        + test_valid_portfolio()
        + test_valid_invalid_portfolio()
    }

    class "conftest_py" <<module>> << (M,orchid) >> {
    }
}

' Define Schemas package and files
package Schemas {
    file "stock-schema.json" << (S, #FFAAAA) >>
}

' Define jsonschema package and classes
package "jsonschema" {
    class "jsonschema"  <<module>> << (M,orchid) >> {
        + validate()
    }
    class "exceptions.ValidationError" {
    }
    "jsonschema" --> "exceptions.ValidationError" : provides
}

' Define modules and packages for external libraries
class "os"  <<module>> << (M,orchid) >> {
}

class "sys"  <<module>> << (M,orchid) >> {
}

class "pytest"  <<module>> << (M,orchid) >> {
}

class "numpy"  <<module>> << (M,orchid) >> {
    ---
    + random.normal()
    + isnan()
    + isinf()
    + cumprod()
}

class "hypothesis" <<module>> << (M,orchid) >> {
    ---
    + given()
    + strategies()
    + settings()
}

class "hypothesis_jsonschema" <<module>> << (M,orchid) >> {
    ---
    + from_schema()
}

' Define pandas package and classes
package "pandas"  {
    class "pandas" <<module>> << (M,orchid) >> {
        + date_range()
    }

    class "DataFrame" {
    }

    class "Series" {
    }

    "pandas" --> "DataFrame" : provides
    "pandas" --> "Series" : provides
}

' Relationships between UnitTests and their dependencies (using 'down' for clean layout)
"UnitTests.test_price_py" -up-> "sample_portfolio.json" : uses
"UnitTests.test_price_py" -up-> "stock.json" : uses
"UnitTests.test_price_py" -up-> "pytest" : uses
"UnitTests.test_price_py" -down-> "pandas.pandas" : uses
"UnitTests.test_price_py" -down-> "PriceApp.price_py" : tests

"UnitTests.test_fuzz_py" -down-> "PriceApp.price_py" : tests
"UnitTests.test_fuzz_py" -down-> "PriceApp.price_py" : uses
"UnitTests.test_fuzz_py" -down-> "pandas.pandas" : uses
"UnitTests.test_fuzz_py" -up-> "pytest" : uses
"UnitTests.test_fuzz_py" -up-> "numpy" : uses
"UnitTests.test_fuzz_py" -down-> "hypothesis" : uses

"UnitTests.test_schema_hypothesis_py" -down-> "Schemas.stock-schema.json" : tests
"UnitTests.test_schema_hypothesis_py" -down-> "hypothesis_jsonschema" : uses
"UnitTests.test_schema_hypothesis_py" -down-> "hypothesis" : uses
"UnitTests.test_schema_hypothesis_py" -down-> "jsonschema.jsonschema" : uses

"UnitTests.conftest_py" -up-> "os" : uses
"UnitTests.conftest_py" -up-> "sys" : uses

@enduml